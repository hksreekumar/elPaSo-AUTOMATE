# Copyright (c) 2023. Authors listed in AUTHORS.md
#
# This file is part of elPaSo-AUTOMATE.
#
# elPaSo-AUTOMATE is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# elPaSo-AUTOMATE is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with elPaSo-AUTOMATE (COPYING.txt). If not, see
# <https://www.gnu.org/licenses/>. 

## AUTOMATE Automated Testing Framework for elPaSo
## The current file is a part of AUTOMATE code package
##
## Authors: Harikrishnan Sreekumar, Christopher Blech
## Property of : Institut für Akustik, TU Braunschweig, Germany

# Python imports
import shutil
import glob
import subprocess
import platform
from pathlib import Path
from tikzplotlib import _save as tikz_save
import matplotlib.pyplot as plt
from fpdf.fpdf import *                     # for PDF generation
from PyPDF2 import PdfMerger 
import numpy as np

# Project imports
from automate.tools.cVisInterface import *
from automate.math.mMathLibrary import *
from automate import config
import time

# Extended fpdf class
# Author: Harikrishnan Sreekumar
# Date: 09.10.2020
class PDF(FPDF):    
    # Page footer
    def footer(self):
        # Position at 1.5 cm from bottom
        self.set_y(-15)
        # Arial italic 8
        self.set_font('Courier', '', 8)
        # Page number
        self.cell(0, 10, 'elPaSo Verification Report, Institut für Akustik, TU Braunschweig | Generated by AUTOMATE', 0, 0, 'R')

# Visualizer class for TEX export
# Author: Harikrishnan Sreekumar
# Date: 09.10.2020
class cVisTex(cVisInterface):
    # Constructor
    # Author: Harikrishnan Sreekumar
    # Date: 06.10.2020
    def __init__(self, harness):
        self.TestHarness = harness
         
    # need to change
    def generateFrequencyErrorPlot(self, outputdir, outputname, frequency, error):
        fig1 = plt.figure()
        plt.plot(frequency,error,'ro-')
        plt.title('Error plot')
        plt.grid()
        plt.xlabel('Frequency [Hz]')
        plt.ylabel('Error norm')
        plt.savefig("{:s}/plots/{:s}.png".format(outputdir, outputname), bbox_inches='tight', dpi=200)
        plt.close()
        return "{:s}/plots/{:s}.png"
        
    def generateDisplacementPlotLoadpt(self,frequencies,targetDisp,sourceDisp,outputdir):
    	outputname='DispFreqLoadPoint'
    	fig2 = plt.figure()
    	plt.plot(frequencies,np.absolute(targetDisp),'r-',label="SyT")
    	plt.plot(frequencies,np.absolute(sourceDisp),'b--',label="SuT")
    	plt.legend(loc="upper right")
    	plt.title('FRF plot')
    	plt.grid()
    	plt.xlabel('Frequency [Hz]')
    	plt.ylabel('FRF')
    	plt.yscale("log")
    	plt.savefig("{:s}/plots/{:s}.png".format(outputdir, outputname), bbox_inches='tight', dpi=200)
    	#plt.show()    	 
    
    # Generate Performance Plot
    # Author: Harikrishnan Sreekumar
    # Date: 22.12.2020
    def generatePerformancePlot(self, outputdir, outputname, xdata, ydata_set1, ydata_set2):
        fig1 = plt.figure()
        plt.plot(xdata,ydata_set1,'ro--', label = 'SUT')
        plt.plot(xdata,ydata_set2,'bX--', label = 'SyT')
        plt.legend()
        plt.title('Performance plot')
        plt.grid()
        plt.xlabel('# processes/threads')
        plt.ylabel('Solver time in seconds')
        plt.savefig("{:s}/plots/{:s}.png".format(outputdir, outputname), bbox_inches='tight', dpi=200)
        return "{:s}/plots/{:s}.png"

    def createHeader(self,Heading):
        self.pdf = PDF()
        self.pdf.add_page()

        self.pdf.set_font(self.fontStyle, size=self.textFontSize )
        # self.pdf.cell(15, 2,ln=0)
        self.pdf.cell(190, 6, txt=" {:s}".format(time.strftime("%d.%m.%Y   %H:%M")), ln=1, align="R")
        #

        #headline
        self.pdf.set_font(self.fontStyle, size=self.headingFontSize, style="B")
        self.pdf.cell(200, 10, txt=Heading, ln=1, align="C")
        self.pdf.line(10, 25, 200, 25)
        self.pdf.ln(4)

    def createTestcaseBody(self,output_folder,suite):

        self.effectivePageWidth = self.pdf.w - 2 * self.pdf.l_margin
        self.pdf.set_font(self.fontStyle, size=self.headingFontSize, style="B" )
        self.pdf.cell(25, 8, txt="General Information:", ln=1, align="L")

        self.pdf.set_font(self.fontStyle, size=self.textFontSize )
        textHeight = self.pdf.font_size

        generalInfoData = [['Folder Name','Created By','Created On'],[suite.suiteConfig["name"],suite.suiteConfig["author"],suite.suiteConfig["date"]]]

        columnWidth = self.effectivePageWidth / 2

        for row in generalInfoData:
            self.pdf.cell(columnWidth, 2 * textHeight, str(row[0]), border=1)
            self.pdf.cell(columnWidth/2, 2 * textHeight, str(row[1]), border=1)
            self.pdf.cell(columnWidth/2, 2 * textHeight, str(row[2]), border=1)
            self.pdf.ln(2 * textHeight)
            
        self.pdf.multi_cell(self.effectivePageWidth, 6, txt="Description: "+ suite.suiteConfig["description"], align="L")

        self.pdf.set_font(self.fontStyle, size=self.headingFontSize, style="B")
        self.pdf.cell(25, 8, txt="elPaSo Information:", ln=1, align="L")

        self.pdf.set_font(self.fontStyle, size=self.textFontSize )
        elpasoInfoData = [['Executable', 'Input/Output', 'Domain'],
                          [suite.systemUnderTest.system,
                           suite.systemUnderTest.systemConfig["input_type"] + '/' + suite.systemUnderTest.systemConfig["output_type"],
                           suite.systemUnderTest.systemConfig["analysis"]]]
        columnWidth = self.effectivePageWidth / 3
        for row in elpasoInfoData:
            for datum in row:
                self.pdf.cell(columnWidth, 2 * textHeight, str(datum), border=1)
            self.pdf.ln(2 * textHeight)
        self.pdf.multi_cell(self.effectivePageWidth, 8, txt="System command: "+suite.systemUnderTest.systemCommand,align="L")

        self.pdf.set_font(self.fontStyle, size=self.headingFontSize, style="B" )
        self.pdf.cell(25, 8, txt="Computation Time:", ln=1, align="L")
        self.pdf.set_font(self.fontStyle, size=self.textFontSize )
        suite.systemUnderTest.binaryInfo = ['-- MODRED -----' if i=='-- MODRED --------------------------------------------------------------' else i for i in suite.systemUnderTest.binaryInfo]
        suite.systemTarget.binaryInfo = ['-- MODRED -----' if i=='-- MODRED --------------------------------------------------------------' else i for i in suite.systemTarget.binaryInfo]
           #suite.systemUnderTest.binaryInfo[18]='MODRED--'
        #print(suite.systemUnderTest.binaryInfo[18])

        index = 10  # for the case when target is eLPaSo
        if len(suite.systemTarget.binaryInfo) < len(suite.systemUnderTest.binaryInfo):
            index = 0
            for i in range(0, int(len(suite.systemUnderTest.binaryInfo)) - int(len(suite.systemTarget.binaryInfo))):
                suite.systemTarget.binaryInfo.append(' ')

        computationTimeData = [['SystemUnderTest | '+suite.systemUnderTest.system, 'SystemTarget | '+suite.systemTarget.system]]

        for i in range(1, int(len(suite.systemUnderTest.binaryInfo) - 10)):
            computationTimeData.append(
                [suite.systemUnderTest.binaryInfo[i + 10], suite.systemTarget.binaryInfo[i + index]])

        columnWidth = self.effectivePageWidth / 2

        for row in computationTimeData:
            y= self.pdf.get_y()
            x= self.pdf.get_x()
            count=0
            for datum in row:            
                
                self.pdf.multi_cell(columnWidth, 2 * textHeight, str(datum), border=1)
                count=count+1
                self.pdf.set_xy(x+columnWidth*count,y)
                
            self.pdf.ln(2 * textHeight)

        self.pdf.set_font(self.fontStyle, size=self.headingFontSize, style="B" )
        self.pdf.cell(25, 8, txt="Results:", ln=1, align="L")
        self.pdf.set_font(self.fontStyle, size=self.textFontSize )
        
        columnWidth = self.effectivePageWidth / 4
        for row in suite.testData:
            for datum in row:
                self.pdf.cell(columnWidth, 2 * textHeight, str(datum), border=1)
            self.pdf.ln(2 * textHeight)
          
        
        if suite.testRemark not in '':
            self.pdf.cell(25, 8, txt="Test remark(s): "+suite.testRemark, ln=1, align="L")
            
        # plot
        for iPlot in suite.plots: # for every plot
            self.pdf.set_font(self.fontStyle, size=self.headingFontSize, style="B" )
            self.pdf.cell(25, 8, txt="Plots:", ln=1, align="L")
            self.pdf.set_font(self.fontStyle, size=self.textFontSize )
            image_path = "{:s}/plots/{:s}.png".format(output_folder, suite.suiteConfig["name"])
            x= self.pdf.get_x()
            y= self.pdf.get_y()
            self.pdf.image(image_path, h=55)
            if suite.testType in suite.wordingCorrectness:
                image_path = "{:s}/plots/{:s}.png".format(output_folder, 'DispFreqLoadPoint')
                self.pdf.image(image_path, x+100,y,h=55)

    def writeFirstPage(self,executedTestsuits,disabledTestsuits):
        #general info
        self.pdf.set_font(self.fontStyle, size=self.headingFontSize, style="B" )
        self.pdf.cell(25, 8, txt="elPaSo Information:", ln=1, align="L")
        self.pdf.set_font(self.fontStyle, size=self.textFontSize )

        printtestsuite=None
    
        for testsuites in executedTestsuits:
            if len(testsuites.systemUnderTest.binaryInfo):
                printtestsuite = testsuites
        
        if printtestsuite==None:
            print('Print information not found')
            exit(1)
        
        for i in range(0, 5):
            # self.pdf.cell(30)
            self.pdf.cell(self.effectivePageWidth / 2, 2*self.pdf.font_size, txt="{:s}".format(printtestsuite.systemUnderTest.binaryInfo[i] ),border=1 )
            self.pdf.cell(self.effectivePageWidth / 2, 2*self.pdf.font_size,
                          txt="{:s}".format(printtestsuite.systemUnderTest.binaryInfo[i+5]),border=1)
            self.pdf.ln(2 * self.pdf.font_size)
            
        # System information
        self.pdf.set_font(self.fontStyle, size=self.headingFontSize, style="B" )
        self.pdf.cell(25, 8, txt="System information:", ln=1, align="L")
        self.pdf.set_font(self.fontStyle, size=self.textFontSize )
        self.pdf.cell(25, 5, txt=subprocess.getoutput('lscpu | grep "Model name"').replace('  ','').replace(':',': ').replace('Model name','Processor'), ln=1, align="L")
        self.pdf.cell(25, 5, txt=subprocess.getoutput('lscpu | grep "Architecture"').replace('  ','').replace(':',': '), ln=1, align="L")
        self.pdf.cell(25, 5, txt=subprocess.getoutput('lscpu | grep "Core(s) per socket"').replace('  ','').replace(':',': '), ln=1, align="L")
        self.pdf.cell(25, 5, txt=subprocess.getoutput('lscpu | grep "Thread(s) per core"').replace('  ','').replace(':',': '), ln=1, align="L")
        self.pdf.cell(25, 5, txt="Hostname: " + platform.node(), ln=1, align="L")
        self.pdf.cell(25, 5, txt="OS: " + platform.system(), ln=1, align="L")
        
        #printing results of all cases
        self.pdf.set_font(self.fontStyle, size=self.headingFontSize, style="B" )
        self.pdf.cell(25, 8, txt="Results:", ln=1, align="L")
        self.pdf.set_font(self.fontStyle, size=self.textFontSize )
        overviewData = [['Case Name', 'Test Type',  'Verified']]
        overviewDataColorRGB = [[0,0,0]]

        for suite in executedTestsuits:
            if suite.testResult in suite.wordingSkipped:
                overviewDataColorRGB.append([255,165,0])    # Orange
            elif suite.testResult in suite.wordingPassed:
                overviewDataColorRGB.append([50,205,50])      # Green
            else:
                overviewDataColorRGB.append([255,0,0])      # Red
            overviewData.append([suite.suiteConfig["name"],suite.testType, suite.testResult ])
            
        overviewData.append(["Overall:","", self.TestHarness.getOverallTestResult(executedTestsuits) ])
        
        columnWidth=self.effectivePageWidth / 2
        textHeight = self.pdf.font_size
        self.pdf.set_font(self.fontStyle, size=self.textFontSize )
        for (row, i) in zip(overviewData, range(len(overviewDataColorRGB))):
            color =overviewDataColorRGB[i]
            self.pdf.set_text_color(color[0],color[1],color[2]) 
            self.pdf.cell(columnWidth, 2 * textHeight, str(row[0]),border=1)
            self.pdf.cell(columnWidth/2, 2 * textHeight, str(row[1]),border=1)
            self.pdf.cell(columnWidth/2, 2 * textHeight, str(row[2]),border=1)
            #for datum in row:
                #self.pdf.cell(columnWidth, 2 * textHeight, str(row[1]),border=1)
            self.pdf.ln(2 * textHeight)
        self.pdf.set_text_color(0,0,0)


        # printing disabled cases
        self.pdf.ln(2 * textHeight)
        self.pdf.set_font(self.fontStyle, size=self.headingFontSize, style="B")
        self.pdf.cell(25, 8, txt="Disabled Testsuits:", ln=1, align="L")
        self.pdf.set_font(self.fontStyle, size=self.textFontSize)


        columnWidth = self.effectivePageWidth / 2
        for suite in disabledTestsuits:
            self.pdf.cell(columnWidth, 2 * textHeight, str(suite.suiteConfig["name"]),border=1)
            self.pdf.ln(2 * textHeight)
        self.pdf.set_font(self.fontStyle, size=self.textFontSize)

    def generateVisualization(self,executedTestsuits,disabledTestsuits):
        self.headingFontSize = 12
        self.textFontSize = 10
        self.fontStyle=  "Courier"
        
        output_folder = self.TestHarness.configuration.outputDirectory + config.pathSeparator + config.outputFolderName
        if not os.path.exists(output_folder + '/reports/tempReports'):
            os.makedirs(output_folder + '/reports/tempReports')
        for suite in executedTestsuits:
            
            if suite.systemUnderTestCheckPassed:
                if suite.testType in suite.wordingCorrectness:
                    plot = self.generateFrequencyErrorPlot(output_folder, suite.suiteConfig["name"], suite.systemUnderTest.freqSteps,
                                            suite.errorNormOverFreq)
                    
                    plot2=self.generateDisplacementPlotLoadpt(suite.systemUnderTest.freqSteps,suite.TArgetVectLoadPt,suite.SOurceVectLoadPt,output_folder)
                elif suite.testType in suite.wordingPerformance:
                    plot = self.generatePerformancePlot(output_folder, suite.suiteConfig["name"], suite.systemUnderTest.thread_vector,
                                            suite.sourceVector, suite.targetVector)                     
                suite.plots.append(plot)
            self.createHeader(suite.suiteConfig["name"])
            self.createTestcaseBody(output_folder,suite)
            self.pdf.output(output_folder + "/reports/tempReports/" + suite.suiteConfig["name"] + "_m.pdf")

        #Creating first page
        self.createHeader('AUTOMATE | elPaSo Verification Report Summary')
        self.writeFirstPage(executedTestsuits,disabledTestsuits)
        self.pdf.output(output_folder + "/reports/tempReports/" + 'firstPage' + ".pdf")
        #merging reports
        temproryReports = glob.glob(output_folder + "/reports/tempReports/" + "*_m.pdf")
        temproryReports.insert(0, output_folder + "/reports/tempReports/firstPage.pdf")
        pdf_merger = PdfMerger()
        for path in temproryReports:
            pdf_merger.append(path)
        with Path(output_folder + "/reports/" + "full_report.pdf").open(mode="wb") as output_file:
             pdf_merger.write(output_file)
             pdf_merger.close()
        os.system('rm -r ' +output_folder + '/reports/tempReports')


